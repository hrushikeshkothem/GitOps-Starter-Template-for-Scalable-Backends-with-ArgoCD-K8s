#!/usr/bin/env bash
set -euo pipefail

NAMESPACE="argocd"
OUT_DIR="out"
CONFIG="config.json"

PROJECT_YAML="$OUT_DIR/project.yaml"
REPO_YAML="$OUT_DIR/repo.yaml"
ACCOUNT_YAML="$OUT_DIR/account.yaml"
APPLICATION_YAML="$OUT_DIR/application.yaml"
VALUES_FILE="helm-values.yaml"

DOMAIN=$(jq -r '.host' "$CONFIG")

echo "üîç Checking required files in '$OUT_DIR'..."

for file in "$PROJECT_YAML" "$REPO_YAML" "$ACCOUNT_YAML" "$APPLICATION_YAML" "$VALUES_FILE"; do
    if [[ ! -f "$file" ]]; then
        echo "‚ùå File '$file' not found! Please generate it before running this script."
        exit 1
    fi
done
echo "‚úÖ All required files found."

# 1Ô∏è‚É£ Install Argo CD Helm chart
echo "1Ô∏è‚É£ Installing Argo CD Helm chart..."
helm install argo-cd argo/argo-cd \
    --namespace "$NAMESPACE" \
    --create-namespace \
    -f "$VALUES_FILE" \
    --set global.domain="$DOMAIN" \
    || echo "‚ö†Ô∏è Argo CD may already be installed, continuing..."

echo "‚è≥ Waiting for Argo CD server to be ready..."
kubectl rollout status deployment/argo-cd-argocd-server \
    --namespace "$NAMESPACE" \
    --timeout=120s

# 2Ô∏è‚É£ Apply project.yaml
echo "2Ô∏è‚É£ Applying project.yaml..."
kubectl apply -f "$PROJECT_YAML"
echo "‚úÖ project.yaml applied."

# 3Ô∏è‚É£ Apply repo.yaml
echo "3Ô∏è‚É£ Applying repo.yaml..."
kubectl apply -f "$REPO_YAML"
echo "‚úÖ repo.yaml applied."

# 4Ô∏è‚É£ Apply account.yaml
echo "4Ô∏è‚É£ Applying account.yaml..."
kubectl apply -f "$ACCOUNT_YAML"
echo "‚úÖ account.yaml applied."

# 5Ô∏è‚É£ Apply application.yaml
echo "5Ô∏è‚É£ Applying application.yaml..."
kubectl apply -f "$APPLICATION_YAML"
echo "‚úÖ application.yaml applied."

echo "‚è≥ Waiting for Argo CD server to become ready at $DOMAIN..."

sleep 120

until curl -sk "https://$DOMAIN"; do
    echo "üîÑ Still waiting for $DOMAIN to respond..."
    sleep 30
done
echo "‚úÖ Argo CD server is now accessible at $DOMAIN."

# 6Ô∏è‚É£ Reset all user passwords to default
echo "6Ô∏è‚É£ Reset for all users passwords"
usernames=$(jq -r '.accounts[].name' "$CONFIG")
for user in $usernames; do
    echo "üîÑ Resetting password for user: $user"
    ./reset-password.sh <<<"$user"
    echo "‚úÖ Password reset completed for user: $user"
    echo
done
echo "‚úÖ All passwords are resetted to default password"

echo "üéâ All resources deployed successfully! üöÄ"
